-- Create categories table
CREATE TABLE IF NOT EXISTS public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    description TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL
);

-- Create threads table
CREATE TABLE IF NOT EXISTS public.threads (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    author_id UUID NOT NULL REFERENCES auth.users(id),
    category_id BIGINT NOT NULL REFERENCES public.categories(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL
);

-- Create posts table
CREATE TABLE IF NOT EXISTS public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id BIGINT NOT NULL REFERENCES public.threads(id),
    author_id UUID NOT NULL REFERENCES auth.users(id),
    content TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'deleted')),
    is_reported BOOLEAN NOT NULL DEFAULT false,
    report_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL
);

-- Enable RLS
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.threads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Categories: Everyone can read
CREATE POLICY "Anyone can read categories" ON public.categories
    FOR SELECT
    USING (true);

-- Threads: Everyone can read
CREATE POLICY "Anyone can read threads" ON public.threads
    FOR SELECT
    USING (true);

-- Threads: Authenticated users can create
CREATE POLICY "Authenticated users can create threads" ON public.threads
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

-- Threads: Authors can update their own threads
CREATE POLICY "Users can update their own threads" ON public.threads
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = author_id)
    WITH CHECK (auth.uid() = author_id);

-- Posts: Everyone can read non-reported posts
CREATE POLICY "Anyone can read non-reported posts" ON public.posts
    FOR SELECT
    USING (NOT is_reported OR EXISTS (
        SELECT 1 FROM public.profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role IN ('moderator', 'admin')
    ));

-- Posts: Authenticated users can create
CREATE POLICY "Authenticated users can create posts" ON public.posts
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

-- Posts: Authors can update their own posts
CREATE POLICY "Users can update their own posts" ON public.posts
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = author_id)
    WITH CHECK (auth.uid() = author_id);

-- Insert some initial data
INSERT INTO public.categories (name, slug, description)
VALUES 
    ('General', 'general', 'General discussions about scam awareness'),
    ('Scam Reports', 'scam-reports', 'Report and discuss potential scams'),
    ('Prevention Tips', 'prevention-tips', 'Tips and advice for preventing scams'),
    ('News', 'news', 'Latest news about scams and fraud');

-- Create triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc', now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_categories_updated_at
    BEFORE UPDATE ON public.categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_threads_updated_at
    BEFORE UPDATE ON public.threads
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_posts_updated_at
    BEFORE UPDATE ON public.posts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 