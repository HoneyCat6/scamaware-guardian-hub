-- Create articles table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    excerpt TEXT NOT NULL,
    content TEXT NOT NULL,
    category TEXT NOT NULL,
    author TEXT NOT NULL,
    author_id UUID NOT NULL REFERENCES auth.users(id),
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    published_at TIMESTAMP WITH TIME ZONE,
    reviewer_id UUID REFERENCES auth.users(id),
    reviewed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc', now()) NOT NULL
);

-- Create RLS policies
ALTER TABLE public.articles ENABLE ROW LEVEL SECURITY;

-- Policy for reading approved articles (public access)
CREATE POLICY "Anyone can read approved articles" ON public.articles
    FOR SELECT
    USING (status = 'approved');

-- Policy for creating articles (authenticated users)
CREATE POLICY "Authenticated users can create articles" ON public.articles
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

-- Policy for updating own articles (authors)
CREATE POLICY "Users can update their own articles" ON public.articles
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = author_id)
    WITH CHECK (auth.uid() = author_id);

-- Policy for moderators and admins (full access)
CREATE POLICY "Moderators and admins have full access" ON public.articles
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND (auth.users.role = 'moderator' OR auth.users.role = 'admin')
        )
    );

-- Create trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc', now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_articles_updated_at
    BEFORE UPDATE ON public.articles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 